@0
3c 01 12 34   // lui  $01, 0x1234
34 21 56 78   // ori  $01, 0x5678       R01 <-- 0x12345678
3c 02 87 65   // lui  $02, 0x8765
34 42 43 21   // ori  $02, 0x4321       R02 <-- 0x87654321
3c 03 ab cd   // lui  $03, 0xABCD
34 63 ef 01   // ori  $03, 0xEF01       R03 <-- 0xABCDEF01
3c 04 01 fe   // lui  $04, 0x01FE
34 84 dc ba   // ori  $04, 0xDCBA       R04 <-- 0x01FEDCBA
3c 05 5a 5a   // lui  $05, 0x5A5A
34 a5 5a 5a   // ori  $05, 0x5A5A       R05 <-- 0x5A5A5A5A
3c 06 ff ff   // lui  $06, 0xFFFF
34 c6 ff ff   // ori  $06, 0xFFFF       R06 <-- 0xFFFFFFFF
3c 07 ff ff   // lui  $07, 0xFFFF
34 e7 ff 00   // ori  $07, 0xFF00       R07 <-- 0xFFFFFF00

00 c7 40 20   // add  $08, $06, $07    
00 c8 48 20   // add  $09, $06, $08
00 c9 50 20   // add  $10, $06, $09
00 ca 58 20   // add  $11, $06, $10
00 cb 60 20   // add  $12, $06, $11
00 cc 68 20   // add  $13, $06, $12
00 cd 70 20   // add  $14, $06, $13
00 ce 78 20   // add  $15, $06, $14

3c 07 10 01   // lui  $07, 0x1001
34 e7 03 F0   // ori  $07, 0x03F0         R07  <-- 0x100103F0
ac ef 00 00   // sw   $15, 0($07)       M[R07] <-- R15
00 00 00 0d   // break


@200          //***********************************************************
              // This ISR will write to registers 16 to 23 as a
              //   "proof" that we were here!
              // Notes: (1) This version assume PC was saved in $ra. If
              //           "jr" isn't implemented, replace it with "break"
              //        (2) This ISR changes R1 ($at) to 0xD0E0
              //***********************************************************
3c 01 01 02   // lui   $1,     0x0102
34 30 03 04   // ori  $16, $1, 0x0304   R16 <-- 0x01020304
3c 01 05 06   // lui   $1,     0x0506
34 31 07 08   // ori  $17, $1, 0x0708   R17 <-- 0x05060708
3c 01 09 0a   // lui   $1,     0x090A
34 32 0b 0c   // ori  $18, $1, 0x0B0C   R18 <-- 0x090A0B0C
3c 01 0d 0e   // lui   $1,     0x0D0E
34 33 0f 00   // ori  $19, $1, 0x0F00   R19 <-- 0x0D0E0F00
3c 01 10 20   // lui   $1,     0x1020
34 34 30 40   // ori  $20, $1, 0x3040   R20 <-- 0x10203040
3c 01 50 60   // lui   $1,     0x5060
34 35 70 80   // ori  $21, $1, 0x7080   R21 <-- 0x50607080
3c 01 90 a0   // lui   $1,     0x90A0
34 36 b0 c0   // ori  $22, $1, 0xB0C0   R22 <-- 0x90A0B0C0
3c 01 d0 e0   // lui   $1,     0xD0E0
34 37 f0 00   // ori  $23, $1, 0xF000   R23 <-- 0xD0E0F000
03 e0 00 08   // jr   $31               return from interrupt (version 1, using $ra)
00 00 00 0d   // break                  use this break if "jr $31" doesn't work

